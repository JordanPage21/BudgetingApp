{
	"info": {
		"_postman_id": "your-collection-id",
		"name": "BudgetingApp",
		"description": "Collection for testing BudgetingApp API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.equal(\"User registered successfully\");",
									"});",
									"",
									"// Store the registered user's credentials for later use",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"if (pm.response.json().success) {",
									"    pm.environment.set(\"registeredUsername\", requestBody.username);",
									"    pm.environment.set(\"registeredPassword\", requestBody.password);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"testpass123\",\n    \"email\": \"test@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					}
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JWT token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('accessToken');",
									"    pm.expect(jsonData.data.tokenType).to.equal(\"Bearer\");",
									"});",
									"",
									"// Store the JWT token for later use",
									"var jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data.accessToken) {",
									"    pm.environment.set(\"jwtToken\", jsonData.data.accessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{registeredUsername}}\",\n    \"password\": \"{{registeredPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.equal(\"Logout successful\");",
									"});",
									"",
									"// Clear the JWT token after logout",
									"pm.environment.unset(\"jwtToken\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					}
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get User by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('username');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data.username).to.equal(pm.variables.get(\"registeredUsername\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/username/{{registeredUsername}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"username",
								"{{registeredUsername}}"
							]
						}
					}
				},
				{
					"name": "Get User by Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('username');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data.email).to.equal(\"test@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/email/test@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"email",
								"test@example.com"
							]
						}
					}
				},
				{
					"name": "Check Username Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates username exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/check-username/{{registeredUsername}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"check-username",
								"{{registeredUsername}}"
							]
						}
					}
				},
				{
					"name": "Check Email Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates email exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/check-email/test@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"check-email",
								"test@example.com"
							]
						}
					}
				}
			]
		},
		{
			"name": "Income Management",
			"item": [
				{
					"name": "Create Income",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has income data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('amount');",
									"    pm.expect(jsonData.data).to.have.property('date');",
									"    pm.expect(jsonData.data).to.have.property('source');",
									"    pm.expect(jsonData.data).to.have.property('isRecurring');",
									"    pm.expect(jsonData.data.name).to.equal(\"Salary\");",
									"    pm.expect(jsonData.data.amount).to.equal(5000.00);",
									"    pm.expect(jsonData.data.source).to.equal(\"Employer\");",
									"    pm.expect(jsonData.data.isRecurring).to.be.true;",
									"});",
									"",
									"// Store the income ID for later use",
									"var jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data.id) {",
									"    pm.environment.set(\"incomeId\", jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Salary\",\n    \"amount\": 5000.00,\n    \"date\": \"2024-03-15\",\n    \"source\": \"Employer\",\n    \"isRecurring\": true,\n    \"frequency\": \"MONTHLY\",\n    \"description\": \"Monthly salary payment\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/incomes/{{registeredUsername}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"incomes",
								"{{registeredUsername}}"
							]
						}
					}
				},
				{
					"name": "Update Income",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated income data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('amount');",
									"    pm.expect(jsonData.data).to.have.property('source');",
									"    pm.expect(jsonData.data.name).to.equal(\"Updated Salary\");",
									"    pm.expect(jsonData.data.amount).to.equal(5500.00);",
									"    pm.expect(jsonData.data.source).to.equal(\"New Employer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Salary\",\n    \"amount\": 5500.00,\n    \"date\": \"2024-03-15\",\n    \"source\": \"New Employer\",\n    \"isRecurring\": true,\n    \"frequency\": \"MONTHLY\",\n    \"description\": \"Updated monthly salary payment\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/incomes/{{incomeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"incomes",
								"{{incomeId}}"
							]
						}
					}
				},
				{
					"name": "Get Income by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has income data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('amount');",
									"    pm.expect(jsonData.data.id).to.equal(parseInt(pm.variables.get(\"incomeId\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/incomes/{{incomeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"incomes",
								"{{incomeId}}"
							]
						}
					}
				},
				{
					"name": "Get User Incomes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has income list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/incomes/user/{{registeredUsername}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"incomes",
								"user",
								"{{registeredUsername}}"
							]
						}
					}
				},
				{
					"name": "Get Incomes by Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has income list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/incomes/{{registeredUsername}}/range?startDate=2024-03-01&endDate=2024-03-31",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"incomes",
								"{{registeredUsername}}",
								"range"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-03-01"
								},
								{
									"key": "endDate",
									"value": "2024-03-31"
								}
							]
						}
					}
				},
				{
					"name": "Get Recurring Incomes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has recurring income list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    if (jsonData.data.length > 0) {",
									"        pm.expect(jsonData.data[0].recurring).to.be.true;",
									"}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/incomes/{{registeredUsername}}/recurring",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"incomes",
								"{{registeredUsername}}",
								"recurring"
							]
						}
					}
				},
				{
					"name": "Delete Income",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.equal(\"Income deleted successfully\");",
									"});",
									"",
									"// Clear the income ID after deletion",
									"pm.environment.unset(\"incomeId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/incomes/{{incomeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"incomes",
								"{{incomeId}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "Category Management",
			"item": [
				{
					"name": "Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has category data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data.name).to.equal(\"Groceries\");",
									"});",
									"",
									"// Store the category ID for later use",
									"var jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data.id) {",
									"    pm.environment.set(\"categoryId\", jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Groceries\",\n    \"description\": \"Food and household items\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{username}}"
							]
						}
					}
				},
				{
					"name": "Update Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated category data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data.name).to.equal(\"Updated Groceries\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Groceries\",\n    \"description\": \"Updated food and household items\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{username}}/{{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{username}}",
								"{{categoryId}}"
							]
						}
					}
				},
				{
					"name": "Delete Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.equal(\"Category deleted successfully\");",
									"});",
									"",
									"// Clear the category ID after deletion",
									"pm.environment.unset(\"categoryId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{username}}/{{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{username}}",
								"{{categoryId}}"
							]
						}
					}
				},
				{
					"name": "Get Category by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has category data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data.id).to.equal(parseInt(pm.variables.get(\"categoryId\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{username}}/{{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{username}}",
								"{{categoryId}}"
							]
						}
					}
				},
				{
					"name": "Get Category by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has category data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data.name).to.equal(\"Updated Groceries\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{username}}/name/{{categoryName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{username}}",
								"name",
								"{{categoryName}}"
							]
						}
					}
				},
				{
					"name": "Get All Categories for User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has categories list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{username}}"
							]
						}
					}
				},
				{
					"name": "Check Category Name Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates category exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{username}}/check-name/{{categoryName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{username}}",
								"check-name",
								"{{categoryName}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "Expense Management",
			"item": [
				{
					"name": "Create Expense",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expense data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('amount');",
									"    pm.expect(jsonData.data).to.have.property('date');",
									"    pm.expect(jsonData.data).to.have.property('category');",
									"    pm.expect(jsonData.data.name).to.equal(\"Grocery Shopping\");",
									"    pm.expect(jsonData.data.amount).to.equal(150.00);",
									"    pm.expect(jsonData.data.isRecurring).to.be.true;",
									"});",
									"",
									"// Store the expense ID for later use",
									"var jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data.id) {",
									"    pm.environment.set(\"expenseId\", jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Grocery Shopping\",\n    \"amount\": 150.00,\n    \"date\": \"2024-03-15\",\n    \"categoryId\": {{categoryId}},\n    \"isRecurring\": true,\n    \"frequency\": \"WEEKLY\",\n    \"description\": \"Weekly grocery shopping\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/expenses/{{registeredUsername}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{registeredUsername}}"
							]
						}
					}
				},
				{
					"name": "Update Expense",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated expense data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('amount');",
									"    pm.expect(jsonData.data).to.have.property('category');",
									"    pm.expect(jsonData.data.name).to.equal(\"Updated Grocery Shopping\");",
									"    pm.expect(jsonData.data.amount).to.equal(175.00);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Grocery Shopping\",\n    \"amount\": 175.00,\n    \"date\": \"2024-03-15\",\n    \"categoryId\": {{categoryId}},\n    \"isRecurring\": true,\n    \"frequency\": \"WEEKLY\",\n    \"description\": \"Updated weekly grocery shopping\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/expenses/{{expenseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{expenseId}}"
							]
						}
					}
				},
				{
					"name": "Get Expense by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expense data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('amount');",
									"    pm.expect(jsonData.data).to.have.property('category');",
									"    pm.expect(jsonData.data.id).to.equal(parseInt(pm.variables.get(\"expenseId\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/expenses/{{expenseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{expenseId}}"
							]
						}
					}
				},
				{
					"name": "Get User Expenses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expense list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/expenses/user/{{registeredUsername}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"user",
								"{{registeredUsername}}"
							]
						}
					}
				},
				{
					"name": "Get Expenses by Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expense list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/expenses/{{registeredUsername}}/range?startDate=2024-03-01&endDate=2024-03-31",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{registeredUsername}}",
								"range"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-03-01"
								},
								{
									"key": "endDate",
									"value": "2024-03-31"
								}
							]
						}
					}
				},
				{
					"name": "Get Expenses by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expense list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    if (jsonData.data.length > 0) {",
									"        pm.expect(jsonData.data[0].category.id).to.equal(parseInt(pm.variables.get(\"categoryId\")));",
									"}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/expenses/{{registeredUsername}}/category/{{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{registeredUsername}}",
								"category",
								"{{categoryId}}"
							]
						}
					}
				},
				{
					"name": "Get Recurring Expenses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has recurring expense list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    if (jsonData.data.length > 0) {",
									"        pm.expect(jsonData.data[0].isRecurring).to.be.true;",
									"}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/expenses/{{registeredUsername}}/recurring",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{registeredUsername}}",
								"recurring"
							]
						}
					}
				},
				{
					"name": "Search Expenses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expense list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    if (jsonData.data.length > 0) {",
									"        pm.expect(jsonData.data[0].name).to.include(\"Grocery\");",
									"}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/expenses/{{registeredUsername}}/search?query=Grocery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{registeredUsername}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "Grocery"
								}
							]
						}
					}
				},
				{
					"name": "Delete Expense",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.equal(\"Expense deleted successfully\");",
									"});",
									"",
									"// Clear the expense ID after deletion",
									"pm.environment.unset(\"expenseId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/expenses/{{expenseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{expenseId}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "Budget Management",
			"item": [
				{
					"name": "Create Budget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has budget data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('month');",
									"    pm.expect(jsonData.data).to.have.property('totalIncome');",
									"    pm.expect(jsonData.data).to.have.property('totalExpenses');",
									"    pm.expect(jsonData.data).to.have.property('savingsGoal');",
									"});",
									"",
									"// Store the budget ID for later use",
									"var jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data.id) {",
									"    pm.environment.set(\"budgetId\", jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"month\": \"2024-03\",\n    \"totalIncome\": 5000.00,\n    \"totalExpenses\": 3000.00,\n    \"savingsGoal\": 1000.00,\n    \"notes\": \"Monthly budget for March 2024\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/budgets/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"budgets",
								"{{username}}"
							]
						}
					}
				},
				{
					"name": "Update Budget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated budget data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('month');",
									"    pm.expect(jsonData.data).to.have.property('totalIncome');",
									"    pm.expect(jsonData.data).to.have.property('totalExpenses');",
									"    pm.expect(jsonData.data).to.have.property('savingsGoal');",
									"    pm.expect(jsonData.data.totalIncome).to.equal(5500.00);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"month\": \"2024-03\",\n    \"totalIncome\": 5500.00,\n    \"totalExpenses\": 3000.00,\n    \"savingsGoal\": 1500.00,\n    \"notes\": \"Updated monthly budget for March 2024\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/budgets/{{budgetId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"budgets",
								"{{budgetId}}"
							]
						}
					}
				},
				{
					"name": "Get Budget by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has budget data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('month');",
									"    pm.expect(jsonData.data).to.have.property('totalIncome');",
									"    pm.expect(jsonData.data).to.have.property('totalExpenses');",
									"    pm.expect(jsonData.data).to.have.property('savingsGoal');",
									"    pm.expect(jsonData.data.id).to.equal(parseInt(pm.variables.get(\"budgetId\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/budgets/{{budgetId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"budgets",
								"{{budgetId}}"
							]
						}
					}
				},
				{
					"name": "Get User Budgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has budgets list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/budgets/user/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"budgets",
								"user",
								"{{username}}"
							]
						}
					}
				},
				{
					"name": "Get Budget by Month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has budget data for specific month\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('month');",
									"    pm.expect(jsonData.data.month).to.equal(\"2024-03\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/budgets/user/{{username}}/month/2024-03",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"budgets",
								"user",
								"{{username}}",
								"month",
								"2024-03"
							]
						}
					}
				},
				{
					"name": "Get Budgets Chronologically",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has chronologically ordered budgets\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    if (jsonData.data.length > 1) {",
									"        var firstMonth = new Date(jsonData.data[0].month + \"-01\");",
									"        var secondMonth = new Date(jsonData.data[1].month + \"-01\");",
									"        pm.expect(firstMonth >= secondMonth).to.be.true;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/budgets/user/{{username}}/chronological",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"budgets",
								"user",
								"{{username}}",
								"chronological"
							]
						}
					}
				},
				{
					"name": "Delete Budget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.equal(\"Budget deleted successfully\");",
									"});",
									"",
									"// Clear the budget ID after deletion",
									"pm.environment.unset(\"budgetId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/budgets/{{budgetId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"budgets",
								"{{budgetId}}"
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "username",
			"value": "testuser"
		},
		{
			"key": "categoryId",
			"value": "1"
		},
		{
			"key": "categoryName",
			"value": "Groceries"
		}
	]
} 